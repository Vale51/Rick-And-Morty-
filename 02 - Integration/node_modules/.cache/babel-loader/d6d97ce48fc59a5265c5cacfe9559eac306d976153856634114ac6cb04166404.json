{"ast":null,"code":"const initialState = {\n  myFavorites: [],\n  allCharacters: [] // Mantenemos una copia de todos los personajes aquí\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"ADD_FAV\":\n      const updatedFavorites = [...state.myFavorites, action.payload];\n      return {\n        ...state,\n        myFavorites: updatedFavorites\n      };\n    case \"FILTER\":\n      const filteredChars = state.allCharacters.filter(character => character.gender === action.payload);\n      return {\n        ...state,\n        myFavorites: filteredChars // Actualizamos myFavorites con los personajes filtrados\n      };\n\n    case \"ORDER\":\n      const orderChars = state.allCharacters.sort((a, b) => {\n        // Ordenamos el array de todos los personajes\n        if (action.payload === \"Ascendente\") {\n          if (a.id < b.id) return -1;\n          if (a.id > b.id) return 1;\n          return 0;\n        } else {\n          if (a.id < b.id) return 1;\n          if (a.id > b.id) return -1;\n          return 0;\n        }\n      });\n      return {\n        ...state,\n        myFavorites: [...orderChars] // Actualizamos myFavorites con el array ordenado\n      };\n\n    case \"REMOVE_FAV\":\n      const updatedList = state.myFavorites.filter(favorite => favorite.id !== parseInt(action.payload));\n      console.log(\"Nuevo estado de myFavorites (después de eliminar):\", updatedList);\n      return {\n        ...state,\n        myFavorites: updatedList\n      };\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["initialState","myFavorites","allCharacters","rootReducer","state","arguments","length","undefined","action","type","updatedFavorites","payload","filteredChars","filter","character","gender","orderChars","sort","a","b","id","updatedList","favorite","parseInt","console","log"],"sources":["C:/Users/risat/OneDrive/Escritorio/SoyHenry-cosas/Modulo-2/FT-M2/06-React-Intro/homework/02 - Integration/src/redux/reducer.js"],"sourcesContent":["const initialState = {\r\n    myFavorites: [],\r\n    allCharacters: [], // Mantenemos una copia de todos los personajes aquí\r\n  };\r\n  \r\n  const rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n      case \"ADD_FAV\":\r\n        const updatedFavorites = [...state.myFavorites, action.payload];\r\n  \r\n        return {\r\n          ...state,\r\n          myFavorites: updatedFavorites,\r\n        };\r\n  \r\n      case \"FILTER\":\r\n        const filteredChars = state.allCharacters.filter(\r\n          (character) => character.gender === action.payload\r\n        );\r\n        return {\r\n          ...state,\r\n          myFavorites: filteredChars, // Actualizamos myFavorites con los personajes filtrados\r\n        };\r\n  \r\n      case \"ORDER\":\r\n        const orderChars = state.allCharacters.sort((a, b) => {\r\n          // Ordenamos el array de todos los personajes\r\n          if (action.payload === \"Ascendente\") {\r\n            if (a.id < b.id) return -1;\r\n            if (a.id > b.id) return 1;\r\n            return 0;\r\n          } else {\r\n            if (a.id < b.id) return 1;\r\n            if (a.id > b.id) return -1;\r\n            return 0;\r\n          }\r\n        });\r\n        return {\r\n          ...state,\r\n          myFavorites: [...orderChars], // Actualizamos myFavorites con el array ordenado\r\n        };\r\n  \r\n      case \"REMOVE_FAV\":\r\n        const updatedList = state.myFavorites.filter(\r\n          (favorite) => favorite.id !== parseInt(action.payload)\r\n        );\r\n        console.log(\"Nuevo estado de myFavorites (después de eliminar):\", updatedList);\r\n        return {\r\n          ...state,\r\n          myFavorites: updatedList,\r\n        };\r\n  \r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default rootReducer;\r\n  "],"mappings":"AAAA,MAAMA,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE,EAAE,CAAE;AACrB,CAAC;;AAED,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAEQ,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC/C,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAK,SAAS;MACZ,MAAMC,gBAAgB,GAAG,CAAC,GAAGN,KAAK,CAACH,WAAW,EAAEO,MAAM,CAACG,OAAO,CAAC;MAE/D,OAAO;QACL,GAAGP,KAAK;QACRH,WAAW,EAAES;MACf,CAAC;IAEH,KAAK,QAAQ;MACX,MAAME,aAAa,GAAGR,KAAK,CAACF,aAAa,CAACW,MAAM,CAC7CC,SAAS,IAAKA,SAAS,CAACC,MAAM,KAAKP,MAAM,CAACG,OAC7C,CAAC;MACD,OAAO;QACL,GAAGP,KAAK;QACRH,WAAW,EAAEW,aAAa,CAAE;MAC9B,CAAC;;IAEH,KAAK,OAAO;MACV,MAAMI,UAAU,GAAGZ,KAAK,CAACF,aAAa,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACpD;QACA,IAAIX,MAAM,CAACG,OAAO,KAAK,YAAY,EAAE;UACnC,IAAIO,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,EAAE,OAAO,CAAC,CAAC;UAC1B,IAAIF,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,EAAE,OAAO,CAAC;UACzB,OAAO,CAAC;QACV,CAAC,MAAM;UACL,IAAIF,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,EAAE,OAAO,CAAC;UACzB,IAAIF,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,EAAE,OAAO,CAAC,CAAC;UAC1B,OAAO,CAAC;QACV;MACF,CAAC,CAAC;MACF,OAAO;QACL,GAAGhB,KAAK;QACRH,WAAW,EAAE,CAAC,GAAGe,UAAU,CAAC,CAAE;MAChC,CAAC;;IAEH,KAAK,YAAY;MACf,MAAMK,WAAW,GAAGjB,KAAK,CAACH,WAAW,CAACY,MAAM,CACzCS,QAAQ,IAAKA,QAAQ,CAACF,EAAE,KAAKG,QAAQ,CAACf,MAAM,CAACG,OAAO,CACvD,CAAC;MACDa,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEJ,WAAW,CAAC;MAC9E,OAAO;QACL,GAAGjB,KAAK;QACRH,WAAW,EAAEoB;MACf,CAAC;IAEH;MACE,OAAOjB,KAAK;EAChB;AACF,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}