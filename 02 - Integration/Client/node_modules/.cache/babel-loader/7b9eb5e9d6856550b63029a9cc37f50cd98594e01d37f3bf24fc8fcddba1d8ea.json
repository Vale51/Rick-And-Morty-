{"ast":null,"code":"import { ADD_FAV, ORDER, REMOVE_FAV, FILTER } from \"./action-types\";\nconst initialState = {\n  myFavorites: [],\n  allCharacters: [] // Mantenemos una copia de todos los personajes aquí\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n  //ya esta desestructurado\n  switch (type) {\n    case ADD_FAV:\n      const copyCharacters = [...state.myFavorites, payload];\n      return {\n        ...state,\n        myFavorites: copyCharacters,\n        allCharacters: copyCharacters\n      };\n    case REMOVE_FAV:\n      return {\n        ...state,\n        myFavorites: state.myFavorites.filter(fav => fav.id !== payload),\n        allCharacters: state.myFavorites\n      };\n    case FILTER:\n      //tengo dos estados para poder filtrar y que no se me pierda el estado\n      //si filtras por female perdes a los que no son female y asi si tenes un solo estado\n      const filterCharacter = payload === \"All\" ? state.allCharacters : state.allCharacters.filter(character => character.gender === payload);\n      return {\n        ...state,\n        myFavorites: filterCharacter,\n        filterGender: payload // género filtrado en el estado\n      };\n\n    case ORDER:\n      const allCharactersCopy = [...state.allCharacters];\n      return {\n        ...state,\n        myFavorites: payload === \"Ascendente\" ? allCharactersCopy.sort((a, b) => a.id - b.id) : allCharactersCopy.sort((a, b) => b.id - a.id)\n      };\n    default:\n      return {\n        ...state\n      };\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["ADD_FAV","ORDER","REMOVE_FAV","FILTER","initialState","myFavorites","allCharacters","rootReducer","state","arguments","length","undefined","type","payload","copyCharacters","filter","fav","id","filterCharacter","character","gender","filterGender","allCharactersCopy","sort","a","b"],"sources":["C:/Users/risat/OneDrive/Documentos/GitHub/Rick-And-Morty-/02 - Integration/Client/src/redux/reducer.js"],"sourcesContent":["import { ADD_FAV, ORDER, REMOVE_FAV, FILTER } from \"./action-types\"\r\n\r\nconst initialState = {\r\n    myFavorites: [],\r\n    allCharacters: [], // Mantenemos una copia de todos los personajes aquí\r\n  };\r\n  \r\n  const rootReducer = (state = initialState, {type, payload}) => { //ya esta desestructurado\r\n    switch(type){\r\n        case ADD_FAV:\r\n            const copyCharacters = [...state.myFavorites, payload];\r\n            return {\r\n                ...state,\r\n                myFavorites: copyCharacters,\r\n                allCharacters: copyCharacters,\r\n            }\r\n        \r\n        case REMOVE_FAV:\r\n            \r\n            return{\r\n                ...state,\r\n                myFavorites: state.myFavorites.filter(fav => fav.id !== payload),\r\n                allCharacters: state.myFavorites\r\n            }\r\n        \r\n        case FILTER:\r\n          //tengo dos estados para poder filtrar y que no se me pierda el estado\r\n          //si filtras por female perdes a los que no son female y asi si tenes un solo estado\r\n          const filterCharacter = payload === \"All\" ? \r\n          state.allCharacters : \r\n          state.allCharacters.filter((character) => character.gender === payload)\r\n\r\n          return {\r\n            ...state,\r\n            myFavorites: filterCharacter,\r\n            filterGender: payload // género filtrado en el estado\r\n      };\r\n        \r\n        case ORDER:\r\n            const allCharactersCopy = [...state.allCharacters]\r\n            return{\r\n                ...state,\r\n                myFavorites:\r\n                    payload === \"Ascendente\"\r\n                    ? allCharactersCopy.sort((a, b) => a.id - b.id)\r\n                    : allCharactersCopy.sort((a, b) => b.id - a.id)\r\n            }\r\n            \r\n        default:\r\n            return {...state}\r\n    }\r\n};\r\n  \r\n  export default rootReducer;\r\n  "],"mappings":"AAAA,SAASA,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEC,MAAM,QAAQ,gBAAgB;AAEnE,MAAMC,YAAY,GAAG;EACjBC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE,EAAE,CAAE;AACrB,CAAC;;AAED,MAAMC,WAAW,GAAG,SAAAA,CAAA,EAA2C;EAAA,IAA1CC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGL,YAAY;EAAA,IAAE;IAACQ,IAAI;IAAEC;EAAO,CAAC,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAO;EAC/D,QAAOC,IAAI;IACP,KAAKZ,OAAO;MACR,MAAMc,cAAc,GAAG,CAAC,GAAGN,KAAK,CAACH,WAAW,EAAEQ,OAAO,CAAC;MACtD,OAAO;QACH,GAAGL,KAAK;QACRH,WAAW,EAAES,cAAc;QAC3BR,aAAa,EAAEQ;MACnB,CAAC;IAEL,KAAKZ,UAAU;MAEX,OAAM;QACF,GAAGM,KAAK;QACRH,WAAW,EAAEG,KAAK,CAACH,WAAW,CAACU,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,KAAKJ,OAAO,CAAC;QAChEP,aAAa,EAAEE,KAAK,CAACH;MACzB,CAAC;IAEL,KAAKF,MAAM;MACT;MACA;MACA,MAAMe,eAAe,GAAGL,OAAO,KAAK,KAAK,GACzCL,KAAK,CAACF,aAAa,GACnBE,KAAK,CAACF,aAAa,CAACS,MAAM,CAAEI,SAAS,IAAKA,SAAS,CAACC,MAAM,KAAKP,OAAO,CAAC;MAEvE,OAAO;QACL,GAAGL,KAAK;QACRH,WAAW,EAAEa,eAAe;QAC5BG,YAAY,EAAER,OAAO,CAAC;MAC5B,CAAC;;IAEC,KAAKZ,KAAK;MACN,MAAMqB,iBAAiB,GAAG,CAAC,GAAGd,KAAK,CAACF,aAAa,CAAC;MAClD,OAAM;QACF,GAAGE,KAAK;QACRH,WAAW,EACPQ,OAAO,KAAK,YAAY,GACtBS,iBAAiB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACP,EAAE,GAAGQ,CAAC,CAACR,EAAE,CAAC,GAC7CK,iBAAiB,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACR,EAAE,GAAGO,CAAC,CAACP,EAAE;MACtD,CAAC;IAEL;MACI,OAAO;QAAC,GAAGT;MAAK,CAAC;EACzB;AACJ,CAAC;AAEC,eAAeD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}